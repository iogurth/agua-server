// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: agua.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MiServicio_Inicializador_FullMethodName     = "/MiServicio/Inicializador"
	MiServicio_EnviarCoordenadas_FullMethodName = "/MiServicio/EnviarCoordenadas"
	MiServicio_Heartbeat_FullMethodName         = "/MiServicio/Heartbeat"
)

// MiServicioClient is the client API for MiServicio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiServicioClient interface {
	Inicializador(ctx context.Context, in *InicializadorRequest, opts ...grpc.CallOption) (*InicializadorResponse, error)
	EnviarCoordenadas(ctx context.Context, in *CoordenadasRequest, opts ...grpc.CallOption) (*CoordenadasResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (MiServicio_HeartbeatClient, error)
}

type miServicioClient struct {
	cc grpc.ClientConnInterface
}

func NewMiServicioClient(cc grpc.ClientConnInterface) MiServicioClient {
	return &miServicioClient{cc}
}

func (c *miServicioClient) Inicializador(ctx context.Context, in *InicializadorRequest, opts ...grpc.CallOption) (*InicializadorResponse, error) {
	out := new(InicializadorResponse)
	err := c.cc.Invoke(ctx, MiServicio_Inicializador_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miServicioClient) EnviarCoordenadas(ctx context.Context, in *CoordenadasRequest, opts ...grpc.CallOption) (*CoordenadasResponse, error) {
	out := new(CoordenadasResponse)
	err := c.cc.Invoke(ctx, MiServicio_EnviarCoordenadas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miServicioClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (MiServicio_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &MiServicio_ServiceDesc.Streams[0], MiServicio_Heartbeat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &miServicioHeartbeatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MiServicio_HeartbeatClient interface {
	Recv() (*HeartbeatResponse, error)
	grpc.ClientStream
}

type miServicioHeartbeatClient struct {
	grpc.ClientStream
}

func (x *miServicioHeartbeatClient) Recv() (*HeartbeatResponse, error) {
	m := new(HeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MiServicioServer is the server API for MiServicio service.
// All implementations must embed UnimplementedMiServicioServer
// for forward compatibility
type MiServicioServer interface {
	Inicializador(context.Context, *InicializadorRequest) (*InicializadorResponse, error)
	EnviarCoordenadas(context.Context, *CoordenadasRequest) (*CoordenadasResponse, error)
	Heartbeat(*HeartbeatRequest, MiServicio_HeartbeatServer) error
	mustEmbedUnimplementedMiServicioServer()
}

// UnimplementedMiServicioServer must be embedded to have forward compatible implementations.
type UnimplementedMiServicioServer struct {
}

func (UnimplementedMiServicioServer) Inicializador(context.Context, *InicializadorRequest) (*InicializadorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inicializador not implemented")
}
func (UnimplementedMiServicioServer) EnviarCoordenadas(context.Context, *CoordenadasRequest) (*CoordenadasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarCoordenadas not implemented")
}
func (UnimplementedMiServicioServer) Heartbeat(*HeartbeatRequest, MiServicio_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedMiServicioServer) mustEmbedUnimplementedMiServicioServer() {}

// UnsafeMiServicioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiServicioServer will
// result in compilation errors.
type UnsafeMiServicioServer interface {
	mustEmbedUnimplementedMiServicioServer()
}

func RegisterMiServicioServer(s grpc.ServiceRegistrar, srv MiServicioServer) {
	s.RegisterService(&MiServicio_ServiceDesc, srv)
}

func _MiServicio_Inicializador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InicializadorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).Inicializador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_Inicializador_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).Inicializador(ctx, req.(*InicializadorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiServicio_EnviarCoordenadas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordenadasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiServicioServer).EnviarCoordenadas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiServicio_EnviarCoordenadas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiServicioServer).EnviarCoordenadas(ctx, req.(*CoordenadasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiServicio_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HeartbeatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MiServicioServer).Heartbeat(m, &miServicioHeartbeatServer{stream})
}

type MiServicio_HeartbeatServer interface {
	Send(*HeartbeatResponse) error
	grpc.ServerStream
}

type miServicioHeartbeatServer struct {
	grpc.ServerStream
}

func (x *miServicioHeartbeatServer) Send(m *HeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MiServicio_ServiceDesc is the grpc.ServiceDesc for MiServicio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiServicio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MiServicio",
	HandlerType: (*MiServicioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inicializador",
			Handler:    _MiServicio_Inicializador_Handler,
		},
		{
			MethodName: "EnviarCoordenadas",
			Handler:    _MiServicio_EnviarCoordenadas_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _MiServicio_Heartbeat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agua.proto",
}
